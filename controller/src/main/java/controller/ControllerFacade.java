package controller;import model.ICharacter;import model.IMap;import model.IModel;import model.IPosition;import view.IView;import java.io.IOException;import java.sql.SQLException;/** * <h1>The Class ControllerFacade provides a facade of the Controller component.</h1> * * @author Jean-Aymeric DIET jadiet@cesi.fr * @version 1.0 */public class ControllerFacade implements OrderPerformerable {    /**     * The model.     */    private final IModel model;    /**     * The view.     */    private IView view;    private Build build;    private ICharacter character;    private IPosition position;    private IMap map;    /**     * Instantiates a new controller facade.     *     * @param model the model     */    public ControllerFacade(final IModel model) throws IOException {        this.model = model;    }    public void setView(final IView view) {        this.view = view;    }    /**     * Start.     *     * @throws SQLException the SQL exception     */    public void start() throws IOException {        build = new Build(view, model);        build.calculateMap();        MainController main = new MainController(model, build);        map = model.getTheMap();        map.addObserver(main);        main.test();    }    @Override    public void orderPerformer(UserOrderable userOrder) {        int x = build.getPosX();        int y = build.getPosY();        try {            character = model.setTheCharacterA(x+16,y+16);        } catch (IOException e) {            e.printStackTrace();        }        position.setPosition(x+16,y+16);        character.setPosition(position);        switch (userOrder.getOrder()) {            case UP:                y += 16;                character.moveU(character.getPosition());                break;            case DOWN:                y -= 16;                character.moveD(character.getPosition());                break;            case LEFT:                x += 16;                character.moveL(character.getPosition());                break;            case RIGHT:                x -= 16;                character.moveR(character.getPosition());                break;        }        character.setPosition(position);        build.setPos(x, y);    }}