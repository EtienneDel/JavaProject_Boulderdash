package controller;import model.IMap;import model.IModel;import view.IView;import java.awt.*;import java.awt.image.BufferedImage;import java.io.IOException;/** * <h1>The Class ControllerFacade provides a facade of the Controller component.</h1> * * @author Jean -Aymeric DIET jadiet@cesi.fr * @version 1.0 */public class ControllerFacade implements OrderPerformerable {    /**     * The model.     */    private final IModel model;    /**     * The view.     */    private IView view;    private Build build = null;    private IMap map;    private OrderController orderController = null;    public static boolean isEnded;    /**     * Instantiates a new controller facade.     *     * @param model the model     * @throws IOException the io exception     */    public ControllerFacade(final IModel model) throws IOException {        this.model = model;        this.map = model.getTheMap();    }    /**     * Sets view.     *     * @param view the view     * @throws IOException the io exception     */    public void setView(final IView view) throws IOException {        this.view = view;        this.build = new Build(view, model);    }    /**     * Start.     *     * @throws IOException the io exception     */    public void start() throws IOException {        orderController = getOrderController();        MainController main = new MainController(model, build, this, view);        view.initScore();        build.calculateMap();        map = model.getTheMap();        map.addObserver(main);        orderController.addObserver(main);        main.test();    }    public void endGame(IView view, IModel model){        System.out.println("GAME OVER");        this.isEnded = true;        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        view.drawImage(model.getGameOver(),0,0);    }    /**     * Gets order controller.     *     * @return the order controller     */    public OrderController getOrderController() {        if (orderController == null)            orderController = new OrderController(build);        return orderController;    }    @Override    public void orderPerformer(UserOrderable userOrder) throws IOException {        orderController.performOrder(userOrder, model, view);    }}